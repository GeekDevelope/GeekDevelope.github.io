<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gyatso Ichiro</title>
  
  <subtitle>嘉措壹郎</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-12-14T17:06:47.447Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>嘉措壹郎</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>高性能网络设计 —— I/O 多路复用</title>
    <link href="http://example.com/2021/12/15/2.2.IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/"/>
    <id>http://example.com/2021/12/15/2.2.IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</id>
    <published>2021-12-14T16:54:08.000Z</published>
    <updated>2021-12-14T17:06:47.447Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>重点内容</strong></p><ul><li><strong>网络 I/O 模型、I/O 多路复用</strong></li><li><strong>水平触发和边缘触发</strong></li><li><strong>select() 系统调用</strong></li><li><strong>poll() 系统调用</strong></li><li><strong>epoll() 编程接口</strong></li></ul></blockquote><hr><h2 id="2-2-1-网络-I-O-模型与-I-O-多路复用"><a href="#2-2-1-网络-I-O-模型与-I-O-多路复用" class="headerlink" title="2.2.1 网络 I/O 模型与 I/O 多路复用"></a>2.2.1 网络 I/O 模型与 I/O 多路复用</h2><blockquote><p><strong>Unix 有五种 I/O 模型：阻塞 I/O 模型(blocking I/O model)、非阻塞 I/O 模型(non-blocking model)、多路复用 I/O 模型(I/O multiplexing model)、信号驱动式 I/O 模型(signal blocking I/O model)、异步 I/O 模型(asynchronous I/O model)</strong></p></blockquote><ul><li><strong>(1) 阻塞与非阻塞的概念</strong></li></ul><blockquote><ul><li><strong>阻塞：阻塞调用是指调用的 I/O 函数没有完成相关的功能，在调用结果返回之前，当前进程被挂起。函数只有在得到结果之后才会返回<br><br>阻塞型 I/O 模型一般适用于单个设备的操作或者不是特别紧急传输数据时，例如：管道设备、终端设备、单客户端的网络设备，阻塞 I/O 最常用、最简单、效率也最低</strong><br><img src="2.2.0.blocking-IO-model.jpg" alt="阻塞 I/O 模型" title="嘉措一郎(Gyatso Ichiro)"></li></ul></blockquote><blockquote><ul><li><strong>非阻塞：非阻塞调用是指当请求的 I/O 操作不能完成时，即使不能立刻返回调用结果也不会阻塞当前进程，而是立即返回 <br><br>非阻塞 I/O 模型适用于 I/O 多路复用(一个进程处理多路数据)，非阻塞 I/O 防止阻塞在 I/O 上，需要轮询</strong><br><img src="2.2.1.non-blocking-IO-model.jpg" alt="非阻塞 I/O 模型" title="嘉措一郎(Gyatso Ichiro)"></li></ul></blockquote><ul><li><strong>(2) 多路复用 I/O 模型</strong></li></ul><blockquote><p><strong>I/O 多路复用允许同时检查多个文件描述符的一种机制</strong></p></blockquote><blockquote><ul><li><strong>内核添加一张表，监听表里面的信息，当有资源准备就绪，就执行</strong></li><li><strong>资源 –文件描述符去除与否</strong></li><li><strong>创建监听表</strong><br><img src="2.2.2.IO-multiplexing-model.jpg" alt="多路复用 I/O 模型" title="嘉措一郎(Gyatso Ichiro)"></li></ul></blockquote><ul><li><strong>(3) 信号驱动式 I/O 和异步 I/O 模型</strong></li></ul><blockquote><ul><li><strong>在信号驱动 I/O 中，文件描述符上可执行 I/O 操作时，进程请求内核为自己发送一个信号，之后进程就可以执行任何其它的任务直到 I/O 就绪为止，此时内核会发送信号给进程，要使用信号驱动 I/O ，程序需要按照如下步骤执行：</strong><blockquote><ul><li><strong>为内核发送的通知信号安装一个信号处理例程</strong></li><li><strong>设定文件描述符的属主，也就是当文件描述符上可执行 I/O 时，会收到通知信号的进程或进程组，fcntl(fd, F_SETOWN, pid);</strong></li><li><strong>通过设定 O_NONBLOCK 标志使能非阻塞 I/O</strong></li><li><strong>通过打开 O_ASYNC 标志使能信号驱动 I/O</strong></li><li><strong>调用进程可以执行其它的任务了</strong></li><li><strong>信号驱动 I/O 提供的是边缘触发通知</strong></li></ul></blockquote></li></ul></blockquote><blockquote><ul><li><strong>异步 I/O 模型</strong><blockquote><ul><li><strong>数据从磁盘加载到buffer中，再将buffer中的数据复制到用户进程缓存区。当数据复制完成后，内核会发生一个信号给进程，这样进程会在用户进程缓存区中读取数据，而后再返回给客户端。其工做原理如图所示</strong><br><img src="2.2.3.asynchronous-IO-model.jpg" alt="信号驱动式 I/O 模型" title="嘉措一郎(Gyatso Ichiro)"></li></ul></blockquote></li></ul></blockquote><blockquote><blockquote><ul><li><strong>异步 I/O 模型与信号驱动 I/O 模型的主要区别在于；信号驱动模型是由内核告知什么时候启动 I/O 操做；而异步 I/O 模型是由内核告知 I/O 操做什么时候完成</strong></li></ul></blockquote></blockquote><hr><h3 id="2-2-2-水平触发和边缘触发"><a href="#2-2-2-水平触发和边缘触发" class="headerlink" title="2.2.2 水平触发和边缘触发"></a>2.2.2 水平触发和边缘触发</h3><blockquote><p><strong>水平触发和边缘触发是文件描述符准备就绪的两种通知模式</strong></p></blockquote><blockquote><ul><li>水平触发通知：如果文件描述符上可以非阻塞地执行 I/O 系统调用，此时认为它已经就绪</li></ul></blockquote><blockquote><ul><li>边缘触发通知：如果文件描述符自上次状态检查以来有了新的 I/O 活动(比如新的输入)，此时需要触发通知</li></ul></blockquote><hr><h3 id="2-2-3-select-系统调用"><a href="#2-2-3-select-系统调用" class="headerlink" title="2.2.3 select()系统调用"></a>2.2.3 select()系统调用</h3><ul><li><p><strong>系统调用 selec t会一直阻塞，直到一个或多个文件描述符集合成为就绪态</strong></p></li><li><p><strong>(1) 函数原型</strong></p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/select.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> nfds, fd_set *readfds, fd_set *writefds,</span></span></span><br><span class="line"><span class="params"><span class="function">                    fd_set *exceptfds, struct timeval *timeout)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>(2) 函数参数</strong><blockquote><ul><li><strong>nfds：文件描述符的范围，即所有文件描述符的最大值加 1，不能出错</strong></li><li><strong>readfds：监听读资源的文件描述符集合</strong></li><li><strong>writefds：监听写资源的文件描述符集合</strong></li><li><strong>exceptfds：监听异常资源的文件描述符集合</strong></li><li><strong>timeout：NULL 一直等待， 或者根据 struct timeval 设置等待时间的上限值</strong> </li></ul></blockquote></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> &#123;</span></span><br><span class="line">    <span class="keyword">long</span>    tv_sec;         <span class="comment">/* seconds */</span>  <span class="comment">/*  秒  */</span></span><br><span class="line">    <span class="keyword">long</span>    tv_usec;        <span class="comment">/* microseconds */</span>  <span class="comment">/*  微妙  */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>readfds、writefds 和 exceptfds 所指向的结构体都是保存结果值的地方，在调用 select() 之前，这些参数指向的结构体必须初始化(通过 FD_ZERO() 和 FD_SET())</strong></p><ul><li><strong>(3) 返回值：成功返回已经准备就绪的文件描述符个数， 失败返回 -1</strong><blockquote><ul><li><strong>返回 -1 表示有错误发生</strong></li><li><strong>返回 0 表示在任何文件描述符成为就绪态之前 select() 调用已经超时</strong></li><li><strong>返回一个正整数表示有一个或多个文件描述符已经处于就绪态</strong></li></ul></blockquote></li></ul><p><strong>通常数据类型 fd_set 以位掩码的形式来实现</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FD_CLR</span><span class="params">(<span class="keyword">int</span> fd, fd_set *set)</span></span>;    <span class="comment">/*  将文件描述符 fd 从 set 所指向的集合中移除 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">FD_ISSET</span><span class="params">(<span class="keyword">int</span> fd, fd_set *set)</span></span>;  <span class="comment">/*  判断文件描述符 fd 是否在 srt 所指向的集合中  */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FD_SET</span><span class="params">(<span class="keyword">int</span> fd, fd_set *set)</span></span>;    <span class="comment">/*  将文件描述 fd 添加到 set 所指向的集合中  */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FD_ZERO</span><span class="params">(fd_set *set)</span></span>;           <span class="comment">/*  将 set 所指向的集合初始化为空  */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong> <br><br><strong>select 正确返回时，会将准备好的文件描述符在集合中对应的位置置 1，其它位置全部置 0，为了保证任然可以监听其它没有 ready 的描述符，必须先将之前的集合保存下来</strong> <br></p></blockquote><ul><li><p><strong>在 Linux 上，异常情况只会在以下两种情况下发生：</strong></p><ul><li><strong>连接到处于信包模式下的伪终端主设备上的从设备状态发生了改变</strong></li><li><strong>流式套接字上接收到了带外数据</strong></li></ul></li><li><p><strong>结构体 fd_set 的大小</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">linux<span class="number">-5.15</span><span class="number">.2</span>\include\linux\types.h</span><br><span class="line"><span class="keyword">typedef</span> __kernel_fd_setfd_set;</span><br><span class="line"></span><br><span class="line">linux<span class="number">-5.15</span><span class="number">.2</span>\include\uapi\linux\posix_types.h</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __FD_SETSIZE1024</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"> <span class="keyword">unsigned</span> <span class="keyword">long</span> fds_bits[__FD_SETSIZE / (<span class="number">8</span> * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">long</span>))];</span><br><span class="line">&#125; __kernel_fd_set;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>(3) select() 系统调用的基本原理</strong><br><img src="2.2.4.select%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86.jpg" alt="select() 系统调用的基本原理" title="嘉措一郎(Gyatso Ichiro)"></p></li></ul><hr><h3 id="2-2-4-poll-系统调用"><a href="#2-2-4-poll-系统调用" class="headerlink" title="2.2.4 poll()系统调用"></a>2.2.4 poll()系统调用</h3><ul><li><p><strong>系统调用 poll() 执行的任务同 select() 相似，主要区别在于如何指定待检查的文件描述符</strong></p></li><li><p><strong>在 select() 中，提供三个集合，在每个集合中标明所需的文件描述符</strong></p></li><li><p><strong>poll() 管理多个文件描述符进行轮询操作(查询文件描述符，如果有指定的事件发生立刻返回)，根据文件描述的状态进行处理，一般通过返回值来确定事件是否发生，没有文件描述符个数的限制</strong></p></li><li><p><strong>poll() 指定时间内轮询指定文件描述符，如果有指定事件发生返回一个真值</strong></p></li><li><p><strong>(1) 函数原型</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;poll.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">poll</span><span class="params">(struct pollfd *fds, <span class="keyword">nfds_t</span> nfds, <span class="keyword">int</span> timeout)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>(2) 函数参数</strong></p><blockquote><ul><li><strong>参数 fds 列出了需要 poll() 来检查的文件描述符，该参数为 pollfd 结构体：</strong></li></ul></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span>   fd;         <span class="comment">/* file descriptor */</span>    <span class="comment">/*  文件描述符  */</span></span><br><span class="line">    <span class="keyword">short</span> events;     <span class="comment">/* requested events */</span>   <span class="comment">/*  请求事件，位掩码  */</span></span><br><span class="line">    <span class="keyword">short</span> revents;    <span class="comment">/* returned events */</span>    <span class="comment">/*  返回事件，位掩码  */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><blockquote><ul><li><strong>参数 nfds 指定了结构体 fds 中元素的个数，nfds_t 实际为无符号整型</strong></li></ul></blockquote><blockquote><ul><li><strong>参数 timeout 决定了 poll() 的阻塞行为：</strong><ul><li><strong>如果 timeout 等于 -1，poll() 会一直阻塞直到 fds 中列出的文件描述符有一个达到就绪态(定义在对应的 events 字段中)或者捕获到一个信号</strong></li><li><strong>如果 timeout 等于 0，poll() 不会阻塞，只执行一次检查，查看哪个文件描述符处于就绪态</strong></li><li><strong>如果 timeout 大于 0，poll() 至多阻塞 timeout 毫秒，timeout 的精度受软件时钟粒度的限制</strong></li></ul></li></ul></blockquote><ul><li><strong>(3) 返回值：成功时 poll() 返回结构体中 events 域不为 0 的文件描述符个数，如果在超时前没有任何事件发生，poll() 会返回 0，失败返回 -1</strong></li></ul><blockquote><blockquote><ul><li><strong>注意</strong> <br></li></ul><p><strong>select() 和 poll() 返回正整数时的细小差别，如果一个文件描述符在返回的描述符集合中出现不止一次，系统调用 select() 会将同一个描述符计数多次，而系统调用 poll() 返回的是就绪态的文件描述符个数，且一个文件描述符只会统计一次，就算在相应的 revents 字段中设定了多个位掩码也是如此</strong></p></blockquote></blockquote><p><strong>文件描述符何时就绪</strong></p><ul><li><p><strong>SUSv3中：如果对 I/O 函数的调用不会阻塞，而不论该函数是否能够实际传输数据，此时文件描述符被认为是就绪的</strong></p></li><li><p><strong>(4) 比较 select() 和 poll()</strong></p><ul><li><p><strong>Linux 内核层面：select() 和 poll() 都使用了相同的内核 poll 例程集合，每个历程都返回有关单个文件描述符就绪的信息，就绪信息以掩码的形式返回，如果被检查的文件描述当中有一个关闭了，poll() 会在 revents 字段中返回 POLLNVAL，而 select() 会返回 -1 且将错误码设为 EBADF</strong></p></li><li><p><strong>select() 所使用的数据类型 fd_set 对于被检查的文件描述符数量有上限限制，FD_SETSIZE 默认为1024，poll() 对于被检查的文件描述符数量本质上没有限制</strong></p></li><li><p><strong>由于 select() 的参数 fd_set 同时也是保存调用结果的地方(保存返回值)，如果在循环中重复调用 select() ，必须每次都要重新初始化 fd_set，而 poll() 通过独立的两个字段 events(针对输入)和 revents(针对输出)分别来处理，避免了每次重新初始化参数的操作</strong></p></li><li><p><strong>select() 提供的超时精度(微妙)比 poll() 提供的超时精度(毫秒)高，这两个系统调用的超时精度都受软件时钟粒度的限制</strong></p></li></ul></li><li><p><strong>(5) select() 和 poll() 存在的问题</strong></p><ul><li><p><strong>每次调用 select() 和 poll()，内核必须检查所有被指定的文件描述符是否处于就绪态，当检查大量处于密集范围内的文件描述符时，该操作耗费的时间将大大超过接下来的操作</strong></p></li><li><p><strong>每次调用 select() 和 poll()，程序必须传递一个表示所有需要被检查的文件描述符数据结构到内核中，内核检查过后修改这个数据结构并返回给程序，select() 每次都要初始化这个数据结构，poll() 随着待检查文件描述符的数量增加，从用户空间到内核空间来回拷贝将占用大量 CPU 时间</strong></p></li><li><p><strong>通常程序重复调用这些系统调用所检查的文件描述符集合都是相同的，可内核并不会每次调用之后记录它们</strong></p></li></ul></li></ul><hr><h3 id="2-2-5-epoll-编程接口"><a href="#2-2-5-epoll-编程接口" class="headerlink" title="2.2.5 epoll 编程接口"></a>2.2.5 epoll 编程接口</h3><p><strong>同 I/O 多路复用和信号驱动 I/O 一样，linux 的 epoll(event poll) API 可以检查多个文件描述符上的 I/O 就绪状态</strong></p><ul><li><p><strong>(1) epoll API 的优势</strong></p><ul><li><p><strong>当检查大量的文件描述符时，epoll 的性能延展性比 select() 和 poll() 高</strong></p></li><li><p><strong>epoll API 既支持水平触发也支持边缘触发，select() 和 poll() 只支持水平触发，信号驱动 I/O 只支持边缘触发</strong></p></li><li><p><strong>可以避免复杂的信号处理流程，比如信号队列溢出时的处理</strong></p></li><li><p><strong>灵活性高，可以指定我们希望检查的数据类型，例如，检查套接字文件描述符的读就绪、写就绪或者两者同时指定</strong></p></li></ul></li><li><p><strong>(2) epoll API 由3个系统调用组成</strong></p><ul><li><p><strong>系统调用 epoll_create() 创建一个 epoll 实列，返回代表该实例的文件描述符</strong></p></li><li><p><strong>系统调用 epoll_ctl() 操作同 epoll 实列相关的兴趣列表，通过 epoll_ctl() 可以增加新的文件描述符到列表中，也可以将已有的文件描述符从列表中移除，以及修改代表文件描述符上事件类型的位掩码</strong></p></li><li><p><strong>系统调用 epoll_wait() 返回与 epoll 实例相关联的就绪列表中的成员</strong></p></li></ul></li><li><p><strong>(4) 创建 epoll 实例：epoll_create()</strong></p></li></ul><blockquote><ul><li><strong>函数原型</strong> </li></ul></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*  epoll_create, epoll_create1 - open an epoll file descriptor  */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_create</span><span class="params">(<span class="keyword">int</span> size)</span></span>;  <span class="comment">/*  On success, these system calls return a nonnegative file descriptor.  On error, -1 is returned, and errno is set to indicate the error  */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*  linux-5.15.2\fs\eventpoll.c  */</span></span><br><span class="line"><span class="built_in">SYSCALL_DEFINE1</span>(epoll_create, <span class="keyword">int</span>, size)</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">if</span> (size &lt;= <span class="number">0</span>)  <span class="comment">/*  epoll_create 的参数 size 只要大于 0 即可，无实际作用  */</span></span><br><span class="line">  <span class="keyword">return</span> -EINVAL;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">do_epoll_create</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><ul><li><strong>函数参数</strong><ul><li><strong>参数：size 只需大于 0 即可，从 linux2.6.8 版本开始忽略不用</strong></li></ul></li></ul></blockquote><blockquote><ul><li><strong>返回值：返回代表新创建 epoll 实例的文件描述符，这个文件描述在其它几个 epoll 系统调用中表示 epoll 实例，当这个文件描述符不再需要时，通过 close() 关闭</strong></li></ul></blockquote><ul><li><p><strong>自 linux2.6.27 版内核开始， 支持一个新的系统调用 epoll_create1()，功能与 epoll_create 相同，去掉了无用参数 size，增加了可以修改系统调用行为的 flag 参数，目前 只支持一个 flag 标志：EPOLL_CLOEXEC</strong></p></li><li><p><strong>(5) 修改 epoll 的兴趣列表：epoll_ctl()</strong></p></li></ul><blockquote><ul><li><strong>系统调用 epoll_ctl() 能够修改由文件描述符 epfd 所代表的 epoll 实例中的兴趣列表</strong></li></ul></blockquote><blockquote><ul><li><strong>函数原型</strong></li></ul></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*  epoll_ctl - control interface for an epoll descriptor  */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_ctl</span><span class="params">(<span class="keyword">int</span> epfd, <span class="keyword">int</span> op, <span class="keyword">int</span> fd, struct epoll_event *event)</span></span>;  <span class="comment">/*  When successful, epoll_ctl() returns zero.  When an error occurs, epoll_ctl() returns -1 and errno is set appropriately  */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*  结构体 epoll_event 中的 data 字段的类型  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span> <span class="title">epoll_data</span> &#123;</span></span><br><span class="line">    <span class="keyword">void</span>        *ptr;</span><br><span class="line">    <span class="keyword">int</span>          fd;</span><br><span class="line">    <span class="keyword">uint32_t</span>     u32;</span><br><span class="line">    <span class="keyword">uint64_t</span>     u64;</span><br><span class="line">&#125; <span class="keyword">epoll_data_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  参数 event 指向的结构体  */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> &#123;</span></span><br><span class="line">    <span class="keyword">uint32_t</span>     events;      <span class="comment">/* Epoll events */</span></span><br><span class="line">    <span class="keyword">epoll_data_t</span> data;        <span class="comment">/* User data variable */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><ul><li><strong>函数参数</strong><ul><li><strong>参数 epfd 文件描述符</strong></li><li><strong>参数 fd 指明了要修改兴趣列表中的哪一个文件描述符的设定</strong></li><li><strong>参数 op 指定需要执行的操作，有以下几种值</strong><blockquote><ul><li><strong>EPOLL_CTL_ADD：将描述符 fd 添加到 epoll 实例 epfd 中的兴趣列表中去</strong></li><li><strong>EPOLL_CTL_MOD：修改描述符 fd 上设定的事件，需要用到由 ev 所指向的结构体中的信息</strong></li><li><strong>EPOLL_CTL_DEL：将文件描述符 fd 从 epfd 的兴趣列表中移除</strong></li></ul></blockquote></li><li><strong>参数 event 是指向结构体 epoll_event 的指针，结构体 epoll_event 中的 data 字段类型为 epoll_data</strong> </li><li><strong>参数 event 为文件描述符 fd 所做的设置如下：</strong></li></ul></li></ul></blockquote><ul><li><p><strong>结构体 epoll_event 中的 events 字段是一个位掩码，它指定了待检查的描述符 fd 上所感兴趣的事件集合</strong></p></li><li><p><strong>data 字段是一个共用体，当描述符 fd 稍后成为就绪态时，共用体的成员用来指定传回给调用进程的信息</strong></p></li></ul><blockquote><ul><li><strong>max_user_watches 上限</strong> <br></li></ul><p><strong>每个注册到 epoll 实例上的文件描述符需要占用一小段不能被交换的内核空间，max_user_watches 可以查看和修改可以注册到 epoll 实例上的文件描述符总数，默认的上限值根据系统可用内存大小计算得出</strong></p></blockquote><ul><li><strong>(6) 事件等待：epoll_wait()</strong></li></ul><blockquote><ul><li><strong>系统调用 epoll_wait() 返回 epoll 实例中处于就绪态的文件描述符信息，单个 epoll_wait() 调用能返回多个就绪态文件描述符的信息</strong></li></ul></blockquote><blockquote><ul><li><strong>函数原型</strong></li></ul></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">NAME</span><br><span class="line">       epoll_wait, epoll_pwait - wait <span class="keyword">for</span> an I/O event on an epoll file descriptor</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">int</span> <span class="title">epoll_wait</span><span class="params">(<span class="keyword">int</span> epfd, struct epoll_event *events,</span></span></span><br><span class="line"><span class="params"><span class="function">                            <span class="keyword">int</span> maxevents, <span class="keyword">int</span> timeout)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><ul><li><strong>函数参数</strong><ul><li><strong>参数 epfd 代表 epoll 实例中兴趣列表的的文件描述符</strong></li><li><strong>参数 events 所指向的结构体数组中返回的是有关就绪态文件描述符的信息，数组 events 的空间由调用者指定，所包含的元素个数在 maxevents 中指定</strong> <br></li></ul></li></ul><p><strong>在数组 events 中，每个元素返回的都是单个就绪态文件描述符的信息，events 字段返回了在该描述符上已经发生的事件掩码，data 字段返回的是在描述符上使用 epoll_ctl() 注册感兴趣的事件时在 ev.data 中所指定的值，注意：data 字段是唯一可获知同这个事件相关的文件描述符号的途径</strong></p><ul><li><strong>参数 timeout 用来确定 epoll_wait() 的阻塞行为，有以下几种</strong> <br></li></ul><p><strong>如果 timeout 等于 -1，将一直阻塞，直到兴趣列表中的文件描述符上有事件产生，或直到捕获到一个信号为止</strong> <br><br><strong>如果 timeout 等于 0，执行一次非阻塞式的检查，看兴趣列表中的文件描述符上产生了哪个事件</strong> <br><br><strong>如果 timeout 大于 0，调用将阻塞至多 timeout 毫秒，直到文件描述符上有事件发生，或者直到捕获到一个信号为止</strong> <br></p></blockquote><blockquote><ul><li><strong>返回值，调用成功后 epoll_wait() 返回数组 events 中的元素个数，如果在 timeout 超时间隔内没有任何文件描述符处于就绪态，返回 0，出错返回 -1</strong></li></ul></blockquote><ul><li><p><strong>在多线程中，可以在一个线程中使用  epoll_ctl() 将文件描述添加到另一个线程中由 epoll_wait() 所监视的 epoll 实例的兴趣列表中，这些对兴趣列表的修改将立刻得到处理，而 epoll_wait() 调用将返回有关新添加的文件描述符的就绪信息</strong></p></li><li><p><strong>(7) epoll 事件</strong></p></li></ul><blockquote><ul><li><strong>当调用 epoll_ctl() 时在 ev.events 中指定的位掩码以及由 epoll_wait() 返回的 events[].event 中的值</strong></li></ul></blockquote><blockquote><ul><li><strong>epoll 中 events 字段上的位掩码值</strong> <br><ul><li><strong>EPOLLIN 作为 epoll_ctl() 的输入，由 epoll_wait() 返回，可读取非高优先级的数据</strong></li><li><strong>EPOLLPRI 作为 epoll_ctl() 的输入，由 epoll_wait() 返回，可读取高优先级的数据</strong></li><li><strong>EPOLLOUT 作为 epoll_ctl() 的输入，由 epoll_wait() 返回，普通数据可写</strong></li><li><strong>EPOLLET 作为 epoll_ctl() 的输入，采用边缘事件触发通知</strong></li></ul></li></ul></blockquote><ul><li><strong>(8) epoll 水平触发通知和边缘触发通知</strong></li></ul><blockquote><ul><li><strong>epoll 默认提供水平触发，epoll 会通知程序何时能再文件描述夫上以以非阻塞方式执行 I/O，同 select 和 poll 提供的通知类型相似</strong></li></ul></blockquote><blockquote><ul><li><strong>epoll 边缘触发，程序调用 epoll_ctl() 时在 ev.events 字段中指定 EPOLLET 标志，epoll 会通知程序自从上一次调用 epoll_wait() 以来文件描述符上是否已经有 I/O 活动了</strong></li></ul></blockquote><blockquote><ul><li><strong>采用边缘触发通知机制的程序基本框架</strong> <br></li></ul><p><strong>1.让所有待监视的文件描述符都成为非阻塞的</strong> <br><br><strong>2.通过 epoll_ctl() 构建 epoll 的兴趣列表</strong> <br><br><strong>3.通过如下的循环处理 I/O 事件</strong> <br></p><blockquote><p><strong>(a)通过 epoll_wait() 取得处于就绪态的文件描述符列表</strong> <br><br><strong>(b)针对每一个处于就绪态的文件描述符，不断进行 I/O 处理直到相关的系统调用(如：read()、write()、recv()、send() 或 accept())返回 EAGAIN 或 EWOULDBLOCK 错误</strong></p></blockquote></blockquote><ul><li><strong>(9) epoll 的基本原理</strong><br><img src="2.2.5.epoll%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86.jpg" alt="epoll 的基本原理" title="嘉措一郎(Gyatso Ichiro)"></li></ul><hr><h3 id="2-2-6-实例程序"><a href="#2-2-6-实例程序" class="headerlink" title="2.2.6 实例程序"></a>2.2.6 实例程序</h3><ul><li><p><strong><a href="https://gitee.com/geekdeveloper/gyatso-ichiro/blob/master/Linux-C%E5%92%8CC++%E5%90%8E%E7%AB%AF%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84%E5%BC%80%E5%8F%91/%E7%AC%AC2%E7%AB%A0-%E9%AB%98%E6%80%A7%E8%83%BD%E7%BD%91%E7%BB%9C%E8%AE%BE%E8%AE%A1/2.1.%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/tcp_server_thread.c" title="TCP Server 一请求一线程模型">TCP Server 一请求一线程模型</a></strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">thread_arg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> clifd;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">cliaddr</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">start_routine</span><span class="params">(<span class="keyword">void</span>* arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> recvmsg[TCP_SERVER_BUFF_SIZE] = &#123; <span class="string">&#x27;\0&#x27;</span> &#125;;  <span class="comment">/*  服务器端接收数据缓冲区  */</span></span><br><span class="line"><span class="keyword">char</span> sendmsg[TCP_SERVER_BUFF_SIZE] = &#123; <span class="string">&#x27;\0&#x27;</span> &#125;;  <span class="comment">/*  服务器端发送数据缓冲区  */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">thread_arg</span> *<span class="title">sarg</span>=</span> (struct thread_arg*)arg;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">bzero</span>(recvmsg, TCP_SERVER_BUFF_SIZE);</span><br><span class="line"><span class="keyword">ssize_t</span> reclen = <span class="built_in">recv</span>(sarg-&gt;clifd, recvmsg, TCP_SERVER_BUFF_SIZE, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (reclen &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">recvmsg[reclen] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: From %s client message: (%s)\n&quot;</span>, <span class="built_in">inet_ntoa</span>(sarg-&gt;cliaddr.sin_addr), recvmsg);</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(sendmsg, recvmsg);</span><br><span class="line"><span class="built_in">send</span>(sarg-&gt;clifd, sendmsg, <span class="built_in">strlen</span>(sendmsg) + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: To client send message: (%s)\n&quot;</span>, <span class="built_in">inet_ntoa</span>(sarg-&gt;cliaddr.sin_addr));</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">strncmp</span>(<span class="string">&quot;exit&quot;</span>, recvmsg, <span class="number">4</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(sarg-&gt;clifd);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;TCP Server close\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  一请求一线程  */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tcp_server_thread</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/*  创建套接字 sockfd  */</span></span><br><span class="line"><span class="keyword">int</span> sockfd = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="number">-1</span> == sockfd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: Create a socket file descriptor error\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: Create a socket file descriptor succeed\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  填充数据结构体  struct sockaddr_in  */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">seraddr</span>;</span></span><br><span class="line"><span class="built_in">memset</span>(&amp;seraddr, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(seraddr));</span><br><span class="line">seraddr.sin_family = AF_INET;                   <span class="comment">/*  地址族：IPv4  */</span></span><br><span class="line">seraddr.sin_port = <span class="built_in">htons</span>(TCP_SERVER_PORT);      <span class="comment">/*  端口号  */</span></span><br><span class="line">seraddr.sin_addr.s_addr = <span class="built_in">htonl</span>(TCP_SERVER_IP); <span class="comment">/*  IP地址  */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*  绑定端口号和IP地址到套接字 sockfd  */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">-1</span> == <span class="built_in">bind</span>(sockfd, (struct sockaddr*)&amp;seraddr, <span class="built_in"><span class="keyword">sizeof</span></span>(seraddr)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: Bind a server IP addr  and port to sockfd error\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: Bind a server IP addr  and port to sockfd succeed\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  开始监听，设置最大链接数  */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">-1</span> == <span class="built_in">listen</span>(sockfd, TCP_SERVER_BACKLOG))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: Listen for connections on a sockfd error\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: Listen for connections on a sockfd succeed\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: Waiting for client&#x27;s link request\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*  等待来自客户端的连接请求  */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">cliaddr</span>;</span></span><br><span class="line"><span class="built_in">memset</span>(&amp;cliaddr, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(cliaddr));</span><br><span class="line"><span class="keyword">socklen_t</span> cliaddrlen = <span class="built_in"><span class="keyword">sizeof</span></span>(cliaddr);</span><br><span class="line"><span class="keyword">int</span> clifd = <span class="built_in">accept</span>(sockfd, (struct sockaddr*)&amp;cliaddr, &amp;cliaddrlen);</span><br><span class="line"><span class="keyword">if</span> (<span class="number">-1</span> == clifd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: Accept a connection on a clifd error\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: Accept a connection on a clifd succeed\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">thread_arg</span> <span class="title">arg</span>;</span></span><br><span class="line"><span class="built_in">memset</span>(&amp;arg, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(arg));</span><br><span class="line">arg.clifd = clifd;</span><br><span class="line">arg.cliaddr.sin_addr = cliaddr.sin_addr;</span><br><span class="line"><span class="keyword">pthread_t</span> thread = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">pthread_create</span>(&amp;thread, <span class="literal">NULL</span>, start_routine, (<span class="keyword">void</span>*)&amp;arg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(sockfd);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: Close\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong><a href="https://gitee.com/geekdeveloper/gyatso-ichiro/blob/master/Linux-C%E5%92%8CC++%E5%90%8E%E7%AB%AF%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84%E5%BC%80%E5%8F%91/%E7%AC%AC2%E7%AB%A0-%E9%AB%98%E6%80%A7%E8%83%BD%E7%BD%91%E7%BB%9C%E8%AE%BE%E8%AE%A1/2.1.%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/tcp_server_select.c" title="TCP Server select() 模型">TCP Server select() 模型</a></strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  TCP Server I/O 多路复用 select  */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tcp_server_select</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> recvmsg[TCP_SERVER_BUFF_SIZE] = &#123; <span class="string">&#x27;\0&#x27;</span> &#125;;  <span class="comment">/*  服务器端接收数据缓冲区  */</span></span><br><span class="line"><span class="keyword">char</span> sendmsg[TCP_SERVER_BUFF_SIZE] = &#123; <span class="string">&#x27;\0&#x27;</span> &#125;;  <span class="comment">/*  服务器端发送数据缓冲区  */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*  创建套接字 sockfd  */</span></span><br><span class="line"><span class="keyword">int</span> sockfd = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="number">-1</span> == sockfd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: Create a socket file descriptor error\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: Create a socket file descriptor succeed\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  填充数据结构体  struct sockaddr_in  */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">seraddr</span>;</span></span><br><span class="line"><span class="built_in">memset</span>(&amp;seraddr, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(seraddr));</span><br><span class="line">seraddr.sin_family = AF_INET;                   <span class="comment">/*  地址族：IPv4  */</span></span><br><span class="line">seraddr.sin_port = <span class="built_in">htons</span>(TCP_SERVER_PORT);      <span class="comment">/*  端口号  */</span></span><br><span class="line">seraddr.sin_addr.s_addr = <span class="built_in">htonl</span>(TCP_SERVER_IP); <span class="comment">/*  IP地址  */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*  绑定端口号和IP地址到套接字 sockfd  */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">-1</span> == <span class="built_in">bind</span>(sockfd, (struct sockaddr*)&amp;seraddr, <span class="built_in"><span class="keyword">sizeof</span></span>(seraddr)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: Bind a server IP addr  and port to sockfd error\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: Bind a server IP addr  and port to sockfd succeed\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  开始监听，设置最大链接数  */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">-1</span> == <span class="built_in">listen</span>(sockfd, TCP_SERVER_BACKLOG))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: Listen for connections on a sockfd error\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: Listen for connections on a sockfd succeed\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">fd_set rfds = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">fd_set rset = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">fd_set wfds = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">fd_set wset = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">FD_ZERO</span>(&amp;rfds);</span><br><span class="line"><span class="built_in">FD_ZERO</span>(&amp;wfds);</span><br><span class="line"><span class="built_in">FD_SET</span>(sockfd, &amp;rfds);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> maxfds = sockfd;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: Waiting for client&#x27;s link request\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">rset = rfds;</span><br><span class="line">wset = wfds;</span><br><span class="line"><span class="comment">/*  等待来自客户端的连接请求  */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">cliaddr</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nready = <span class="built_in">select</span>(maxfds + <span class="number">1</span>, &amp;rset, &amp;wset, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FD_ISSET</span>(sockfd, &amp;rset))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(&amp;cliaddr, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(cliaddr));</span><br><span class="line"><span class="keyword">socklen_t</span> cliaddrlen = <span class="built_in"><span class="keyword">sizeof</span></span>(cliaddr);</span><br><span class="line"><span class="keyword">int</span> clifd = <span class="built_in">accept</span>(sockfd, (struct sockaddr*)&amp;cliaddr, &amp;cliaddrlen);</span><br><span class="line"><span class="keyword">if</span> (<span class="number">-1</span> == clifd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: Accept a connection on a clifd error\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: Accept a connection on a clifd succeed\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">FD_SET</span>(clifd, &amp;rfds);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (clifd &gt; maxfds)</span><br><span class="line">&#123;</span><br><span class="line">maxfds = clifd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == --nready)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = sockfd + <span class="number">1</span>; i &lt;= maxfds; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FD_ISSET</span>(i, &amp;rset))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">bzero</span>(recvmsg, TCP_SERVER_BUFF_SIZE);</span><br><span class="line"><span class="keyword">ssize_t</span> reclen = <span class="built_in">recv</span>(i, recvmsg, TCP_SERVER_BUFF_SIZE, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (reclen &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">recvmsg[reclen] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: From %s client message: (%s)\n&quot;</span>, <span class="built_in">inet_ntoa</span>(cliaddr.sin_addr), recvmsg);</span><br><span class="line"></span><br><span class="line"><span class="built_in">FD_CLR</span>(i, &amp;rfds);</span><br><span class="line"><span class="built_in">FD_SET</span>(i, &amp;wfds);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">0</span> == reclen)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">FD_CLR</span>(i, &amp;rfds);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;disconnect\n&quot;</span>);</span><br><span class="line"><span class="built_in">close</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == --nready)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FD_ISSET</span>(i, &amp;wset))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">bzero</span>(sendmsg, TCP_SERVER_BUFF_SIZE);</span><br><span class="line"><span class="built_in">strcpy</span>(sendmsg, recvmsg);</span><br><span class="line"></span><br><span class="line"><span class="built_in">send</span>(i, sendmsg, <span class="built_in">strlen</span>(sendmsg) + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">FD_CLR</span>(i, &amp;wfds);    <span class="comment">/*  清除写事件标志  */</span></span><br><span class="line"><span class="built_in">FD_SET</span>(i, &amp;rfds);    <span class="comment">/*  修改为读事件  */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: To client send message: (%s)\n&quot;</span>, <span class="built_in">inet_ntoa</span>(cliaddr.sin_addr));</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">strncmp</span>(<span class="string">&quot;exit&quot;</span>, recvmsg, <span class="number">4</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(sockfd);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: Close\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong><a href="https://gitee.com/geekdeveloper/gyatso-ichiro/blob/master/Linux-C%E5%92%8CC++%E5%90%8E%E7%AB%AF%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84%E5%BC%80%E5%8F%91/%E7%AC%AC2%E7%AB%A0-%E9%AB%98%E6%80%A7%E8%83%BD%E7%BD%91%E7%BB%9C%E8%AE%BE%E8%AE%A1/2.1.%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/tcp_server_poll.c" title="TCP Server poll() 模型">TCP Server poll() 模型</a></strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  客户端 I/O 多路复用 poll  */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tcp_server_poll</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> recvmsg[TCP_SERVER_BUFF_SIZE] = &#123; <span class="string">&#x27;\0&#x27;</span> &#125;;  <span class="comment">/*  服务器端接收数据缓冲区  */</span></span><br><span class="line"><span class="keyword">char</span> sendmsg[TCP_SERVER_BUFF_SIZE] = &#123; <span class="string">&#x27;\0&#x27;</span> &#125;;  <span class="comment">/*  服务器端发送数据缓冲区  */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*  创建套接字 sockfd  */</span></span><br><span class="line"><span class="keyword">int</span> sockfd = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="number">-1</span> == sockfd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: Create a socket file descriptor error\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: Create a socket file descriptor succeed\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  填充数据结构体  struct sockaddr_in  */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">seraddr</span>;</span></span><br><span class="line"><span class="built_in">memset</span>(&amp;seraddr, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(seraddr));</span><br><span class="line">seraddr.sin_family = AF_INET;                   <span class="comment">/*  地址族：IPv4  */</span></span><br><span class="line">seraddr.sin_port = <span class="built_in">htons</span>(TCP_SERVER_PORT);      <span class="comment">/*  端口号  */</span></span><br><span class="line">seraddr.sin_addr.s_addr = <span class="built_in">htonl</span>(TCP_SERVER_IP); <span class="comment">/*  IP地址  */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*  绑定端口号和IP地址到套接字 sockfd  */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">-1</span> == <span class="built_in">bind</span>(sockfd, (struct sockaddr*)&amp;seraddr, <span class="built_in"><span class="keyword">sizeof</span></span>(seraddr)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: Bind a server IP addr  and port to sockfd error\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: Bind a server IP addr  and port to sockfd succeed\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  开始监听，设置最大链接数  */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">-1</span> == <span class="built_in">listen</span>(sockfd, TCP_SERVER_BACKLOG))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: Listen for connections on a sockfd error\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: Listen for connections on a sockfd succeed\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> <span class="title">fds</span>[<span class="title">POLLFD_SIZE</span>] =</span> &#123; <span class="number">0</span> &#125;;</span><br><span class="line">fds[<span class="number">0</span>].fd = sockfd;</span><br><span class="line">fds[<span class="number">0</span>].events = POLLIN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> maxfds = sockfd;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: Waiting for client&#x27;s link request\n&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">cliaddr</span>;</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> nready = <span class="built_in">poll</span>(fds, maxfds + <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span> (fds[<span class="number">0</span>].revents &amp; POLLIN)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*  等待来自客户端的连接请求  */</span></span><br><span class="line"><span class="built_in">memset</span>(&amp;cliaddr, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(cliaddr));</span><br><span class="line"><span class="keyword">socklen_t</span> cliaddrlen = <span class="built_in"><span class="keyword">sizeof</span></span>(cliaddr);</span><br><span class="line"><span class="keyword">int</span> clifd = <span class="built_in">accept</span>(sockfd, (struct sockaddr*)&amp;cliaddr, &amp;cliaddrlen);</span><br><span class="line"><span class="keyword">if</span> (<span class="number">-1</span> == clifd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: Accept a connection on a clifd error\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: Accept a connection on a clifd succeed\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">fds[clifd].fd = clifd;</span><br><span class="line">fds[clifd].events = POLLIN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (clifd &gt; maxfds)</span><br><span class="line">&#123;</span><br><span class="line">maxfds = clifd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == --nready)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = sockfd + <span class="number">1</span>; i &lt;= maxfds; i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (fds[i].revents &amp; POLLIN)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">bzero</span>(recvmsg, TCP_SERVER_BUFF_SIZE);</span><br><span class="line"><span class="keyword">ssize_t</span> reclen = <span class="built_in">recv</span>(i, recvmsg, TCP_SERVER_BUFF_SIZE, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (reclen &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">recvmsg[reclen] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: From %s client message: (%s)\n&quot;</span>, <span class="built_in">inet_ntoa</span>(cliaddr.sin_addr), recvmsg);</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(sendmsg, recvmsg);</span><br><span class="line"><span class="built_in">send</span>(i, sendmsg, <span class="built_in">strlen</span>(sendmsg) + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: To client send message: (%s)\n&quot;</span>, <span class="built_in">inet_ntoa</span>(cliaddr.sin_addr));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">0</span> == reclen)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">fds[i].fd = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;disconnect\n&quot;</span>);</span><br><span class="line"><span class="built_in">close</span>(i);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == --nready)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(sockfd);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: Close\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong><a href="https://gitee.com/geekdeveloper/gyatso-ichiro/blob/master/Linux-C%E5%92%8CC++%E5%90%8E%E7%AB%AF%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84%E5%BC%80%E5%8F%91/%E7%AC%AC2%E7%AB%A0-%E9%AB%98%E6%80%A7%E8%83%BD%E7%BD%91%E7%BB%9C%E8%AE%BE%E8%AE%A1/2.1.%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/tcp_server_epoll.c" title="TCP Server epoll() 模型">TCP Server epoll() 模型</a></strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  epoll  */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tcp_server_epoll</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> recvmsg[TCP_SERVER_BUFF_SIZE] = &#123; <span class="string">&#x27;\0&#x27;</span> &#125;;  <span class="comment">/*  服务器端接收数据缓冲区  */</span></span><br><span class="line"><span class="keyword">char</span> sendmsg[TCP_SERVER_BUFF_SIZE] = &#123; <span class="string">&#x27;\0&#x27;</span> &#125;;  <span class="comment">/*  服务器端发送数据缓冲区  */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*  创建套接字 sockfd  */</span></span><br><span class="line"><span class="keyword">int</span> sockfd = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="number">-1</span> == sockfd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: Create a socket file descriptor error\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: Create a socket file descriptor succeed\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  填充数据结构体  struct sockaddr_in  */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">seraddr</span>;</span></span><br><span class="line"><span class="built_in">memset</span>(&amp;seraddr, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(seraddr));</span><br><span class="line">seraddr.sin_family = AF_INET;                   <span class="comment">/*  地址族：IPv4  */</span></span><br><span class="line">seraddr.sin_port = <span class="built_in">htons</span>(TCP_SERVER_PORT);      <span class="comment">/*  端口号  */</span></span><br><span class="line">seraddr.sin_addr.s_addr = <span class="built_in">htonl</span>(TCP_SERVER_IP); <span class="comment">/*  IP地址  */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*  绑定端口号和IP地址到套接字 sockfd  */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">-1</span> == <span class="built_in">bind</span>(sockfd, (struct sockaddr*)&amp;seraddr, <span class="built_in"><span class="keyword">sizeof</span></span>(seraddr)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: Bind a server IP addr  and port to sockfd error\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: Bind a server IP addr  and port to sockfd succeed\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  开始监听，设置最大链接数  */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">-1</span> == <span class="built_in">listen</span>(sockfd, TCP_SERVER_BACKLOG))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: Listen for connections on a sockfd error\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: Listen for connections on a sockfd succeed\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> epfd = <span class="built_in">epoll_create</span>(<span class="number">1</span>); <span class="comment">/*  参数只要大于0即可，实际无意义  */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">events</span>[<span class="title">EPOLL_EVENTS_SIZE</span>] =</span> &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">ev</span>;</span></span><br><span class="line"><span class="built_in">memset</span>(&amp;ev, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(ev));</span><br><span class="line">ev.events = EPOLLIN;</span><br><span class="line">ev.data.fd = sockfd;</span><br><span class="line"></span><br><span class="line"><span class="built_in">epoll_ctl</span>(epfd, EPOLL_CTL_ADD, sockfd, &amp;ev);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">cliaddr</span>;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: Waiting for client&#x27;s link request\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> nready = <span class="built_in">epoll_wait</span>(epfd, events, EPOLL_EVENTS_SIZE, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="number">-1</span> == nready)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nready; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> evfd = events[i].data.fd;</span><br><span class="line"><span class="keyword">if</span> (evfd == sockfd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*  等待来自客户端的连接请求  */</span></span><br><span class="line"><span class="built_in">memset</span>(&amp;cliaddr, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(cliaddr));</span><br><span class="line"><span class="keyword">socklen_t</span> cliaddrlen = <span class="built_in"><span class="keyword">sizeof</span></span>(cliaddr);</span><br><span class="line"><span class="keyword">int</span> clifd = <span class="built_in">accept</span>(sockfd, (struct sockaddr*)&amp;cliaddr, &amp;cliaddrlen);</span><br><span class="line"><span class="keyword">if</span> (<span class="number">-1</span> == clifd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: Accept a connection on a clifd error\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: Accept a connection on a clifd succeed\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">ev.events = EPOLLIN;</span><br><span class="line">ev.data.fd = clifd;</span><br><span class="line"><span class="built_in">epoll_ctl</span>(epfd, EPOLL_CTL_ADD, clifd, &amp;ev);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (events[i].events &amp; EPOLLIN)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">bzero</span>(recvmsg, TCP_SERVER_BUFF_SIZE);</span><br><span class="line"><span class="keyword">ssize_t</span> reclen = <span class="built_in">recv</span>(evfd, recvmsg, TCP_SERVER_BUFF_SIZE, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (reclen &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">recvmsg[reclen] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: From %s client message: (%s)\n&quot;</span>, <span class="built_in">inet_ntoa</span>(cliaddr.sin_addr), recvmsg);</span><br><span class="line"><span class="built_in">bzero</span>(sendmsg, TCP_SERVER_BUFF_SIZE);</span><br><span class="line"><span class="built_in">strcpy</span>(sendmsg, recvmsg);</span><br><span class="line"><span class="built_in">send</span>(evfd, sendmsg, <span class="built_in">strlen</span>(sendmsg) + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[TCP Server]: To client send message: (%s)\n&quot;</span>, <span class="built_in">inet_ntoa</span>(cliaddr.sin_addr));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">0</span> == reclen)</span><br><span class="line">&#123;</span><br><span class="line">ev.events = EPOLLIN;</span><br><span class="line">ev.data.fd = evfd;</span><br><span class="line"><span class="built_in">epoll_ctl</span>(epfd, EPOLL_CTL_DEL, events[i].data.fd, &amp;ev);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Client close\n&quot;</span>);</span><br><span class="line"><span class="built_in">close</span>(evfd);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(sockfd);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;TCP Server close\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;重点内容&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;网络 I/O 模型、I/O 多路复用&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;水平触发和边缘触发&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;</summary>
      
    
    
    
    
    <category term="技术博客" scheme="http://example.com/tags/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 基本语法及 Markdown 文档模板</title>
    <link href="http://example.com/2021/12/14/hello-world/"/>
    <id>http://example.com/2021/12/14/hello-world/</id>
    <published>2021-12-14T15:35:21.184Z</published>
    <updated>2021-12-14T16:34:43.888Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Markdown 是一种轻量级标记语言，排版语法简洁，让人们更多地关注内容本身而非排版。它使用易读易写的纯文本格式编写文档，可与 HTML 混编，可导出 HTML、PDF 以及本身的 .md 格式的文件。因简洁、高效、易读、易写，Markdown 被大量使用，如 Github、Wikipedia、简书等。</strong></p><h2 id="第1章-标题"><a href="#第1章-标题" class="headerlink" title="第1章 标题"></a>第1章 标题</h2><p><strong>不同数量的<code>#</code>可以完成不同的标题，如下：</strong></p><blockquote><ul><li><strong>题目：# xxxx-xxxx</strong></li><li><strong>章节：## 第1章 xxxx</strong></li><li><strong>三级：### 1.1 xxxx</strong></li><li><strong>四级：#### 1.1.1 xxxx</strong></li></ul></blockquote><h2 id="第2章-字体"><a href="#第2章-字体" class="headerlink" title="第2章 字体"></a>第2章 字体</h2><ul><li><p><strong>2.1 粗体</strong></p><ul><li><strong>这个是粗体(不能有空格)</strong></li></ul></li><li><p><strong>2.2 斜体</strong></p><ul><li><em>这个是斜体</em></li></ul></li><li><p><strong>2.3 粗体加斜体</strong></p><ul><li><em><strong>这个是粗体加斜体</strong></em></li></ul></li><li><p><strong>2.4 删除线</strong></p></li></ul><p>~这里想用删除线~~</p><h2 id="第3章-列表"><a href="#第3章-列表" class="headerlink" title="第3章 列表"></a>第3章 列表</h2><h3 id="3-1-无序列表"><a href="#3-1-无序列表" class="headerlink" title="3.1 无序列表"></a>3.1 无序列表</h3><h4 id="3-1-1-无序列表的使用，在符号-后加空格使用。如下："><a href="#3-1-1-无序列表的使用，在符号-后加空格使用。如下：" class="headerlink" title="3.1.1 无序列表的使用，在符号 - 后加空格使用。如下："></a>3.1.1 无序列表的使用，在符号 <code>-</code> 后加空格使用。如下：</h4><ul><li>无序列表 1</li><li>无序列表 2</li><li>无序列表 3</li></ul><h4 id="3-1-2-如果要控制列表的层级，则需要在符号-前使用空格。如下："><a href="#3-1-2-如果要控制列表的层级，则需要在符号-前使用空格。如下：" class="headerlink" title="3.1.2 如果要控制列表的层级，则需要在符号 - 前使用空格。如下："></a>3.1.2 如果要控制列表的层级，则需要在符号 <code>-</code> 前使用空格。如下：</h4><ul><li>无序列表 1</li><li>无序列表 2<ul><li>无序列表 2.1</li><li>无序列表 2.2</li></ul></li></ul><h3 id="3-2-有序列表"><a href="#3-2-有序列表" class="headerlink" title="3.2 有序列表"></a>3.2 有序列表</h3><p><strong>有序列表的使用，在数字及符号 <code>.</code> 后加空格后输入内容，如下：</strong></p><ol><li>有序列表 1</li><li>有序列表 2</li><li>有序列表 3</li></ol><h2 id="第4章-引用"><a href="#第4章-引用" class="headerlink" title="第4章 引用"></a>第4章 引用</h2><p><strong>引用的格式是在符号 <code>&gt;</code> 后面书写文字。如下：</strong></p><blockquote><p>读一本好书，就是在和高尚的人谈话。 ——歌德</p></blockquote><blockquote><p>科学是一种强大的智慧力量，它致力于破除禁锢着我的神秘的桎梏。——高尔基</p></blockquote><blockquote><p>一面科技，一面艺术。——青年报 - 昨日</p></blockquote><h2 id="第5章-链接"><a href="#第5章-链接" class="headerlink" title="第5章 链接"></a>第5章 链接</h2><p>Linux 内核网站：<a href="https://mirrors.edge.kernel.org/pub/linux/kernel/">https://mirrors.edge.kernel.org/pub/linux/kernel/</a></p><p>Linux 内核网站：<code>https://mirrors.edge.kernel.org/pub/linux/kernel/</code></p><p><a href="https://mirrors.edge.kernel.org/pub/linux/kernel/">Linux 内核源码下载链接</a></p><h2 id="第6章-图片"><a href="#第6章-图片" class="headerlink" title="第6章 图片"></a>第6章 图片</h2><p><strong>插入图片，格式如下：</strong></p><p><img src="https://www.nginx.cn/wp-content/uploads/2020/03/qrcode_for_gh_82cf87d482f0_258.jpg" alt="这里写图片描述"></p><p>支持 jpg、png、gif、svg 等图片格式，<strong>其中 svg 文件仅可在微信公众平台中使用</strong></p><h2 id="第7章-分割线"><a href="#第7章-分割线" class="headerlink" title="第7章 分割线"></a>第7章 分割线</h2><p><strong>可以在一行中用三个以上的减号来建立一个分隔线，同时需要在分隔线的上面空一行。如下：</strong></p><hr><h2 id="第8章-表格"><a href="#第8章-表格" class="headerlink" title="第8章 表格"></a>第8章 表格</h2><p><strong>可以使用冒号来定义表格的对齐方式，如下：</strong></p><table><thead><tr><th align="left">姓名</th><th align="center">年龄</th><th align="right">工作</th></tr></thead><tbody><tr><td align="left">小可爱</td><td align="center">18</td><td align="right">吃可爱多</td></tr><tr><td align="left">小小勇敢</td><td align="center">20</td><td align="right">爬棵勇敢树</td></tr><tr><td align="left">小小小机智</td><td align="center">22</td><td align="right">看一本机智书</td></tr></tbody></table><h2 id="第9章-特殊语法"><a href="#第9章-特殊语法" class="headerlink" title="第9章 特殊语法"></a>第9章 特殊语法</h2><h3 id="9-1-脚注"><a href="#9-1-脚注" class="headerlink" title="9.1 脚注"></a>9.1 脚注</h3><p>有人认为在<a href="https://en.wikipedia.org/wiki/Front-end_web_development" title="Front-end web development">大前端时代</a>的背景下，移动端开发（Android、IOS）将逐步退出历史舞台。</p><p><a href="%E6%98%AF%E6%8C%87%E6%8E%8C%E6%8F%A1%E5%A4%9A%E7%A7%8D%E6%8A%80%E8%83%BD%EF%BC%8C%E5%B9%B6%E8%83%BD%E5%88%A9%E7%94%A8%E5%A4%9A%E7%A7%8D%E6%8A%80%E8%83%BD%E7%8B%AC%E7%AB%8B%E5%AE%8C%E6%88%90%E4%BA%A7%E5%93%81%E7%9A%84%E4%BA%BA%E3%80%82" title="什么是全栈工程师">全栈工程师</a>在业务开发流程中起到了至关重要的作用。</p><h3 id="9-2-代码块"><a href="#9-2-代码块" class="headerlink" title="9.2 代码块"></a>9.2 代码块</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * list_rotate_left - rotate the list to the left</span></span><br><span class="line"><span class="comment"> * @head: the head of the list</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">list_rotate_left</span><span class="params">(struct list_head *head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> *<span class="title">first</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">list_empty</span>(head)) &#123;</span><br><span class="line">first = head-&gt;next;</span><br><span class="line"><span class="built_in">list_move_tail</span>(first, head);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;Markdown 是一种轻量级标记语言，排版语法简洁，让人们更多地关注内容本身而非排版。它使用易读易写的纯文本格式编写文档，可与 HTML 混编，可导出 HTML、PDF 以及本身的 .md 格式的文件。因简洁、高效、易读、易写，Markdown 被大量使用</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>博客简介</title>
    <link href="http://example.com/2021/12/14/%E7%AE%80%E4%BB%8B/"/>
    <id>http://example.com/2021/12/14/%E7%AE%80%E4%BB%8B/</id>
    <published>2021-12-13T16:54:08.000Z</published>
    <updated>2021-12-14T17:00:36.815Z</updated>
    
    <content type="html"><![CDATA[<p><strong>于辛丑牛年农历冬月拾壹正式运营个人技术博客</strong></p><blockquote><p><strong>2021-12-24</strong></p></blockquote><blockquote><p><strong>Gyatso Ichiro</strong></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;于辛丑牛年农历冬月拾壹正式运营个人技术博客&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;2021-12-24&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Gyatso I</summary>
      
    
    
    
    
  </entry>
  
</feed>
